%{
open Lang.Ast

let helper x = x * x
%}

// start token
%start start

// tokens, used by lexer
%token <int> INT
%token <string> IDENT
%token LEFT_PAREN
%token RIGHT_PAREN
%token STAR
%token SLASH
%token PLUS
%token MINUS
%token LET
%token EQUALS
%token EOF

// precedence and associativity
%left PLUS MINUS
%left STAR SLASH

// return type of parser, marked by start token
%type <Expr option> start

%%

// production rules:
// rule name: matching expression with TERMINALS and non-terminals { action as F# code }
start: prog { $1 }

prog:
  | EOF { None }
  | expr EOF { Some $1 }

expr:
  | INT { Int $1 }
  | MINUS INT { Int (-1 * $2)}
  | IDENT { Ident $1 }
  | LEFT_PAREN expr RIGHT_PAREN { Paren $2 }
  | expr PLUS expr { InfixApp ($1, Operator.AddOp, $3) }
  | expr MINUS expr { InfixApp ($1, Operator.SubOp, $3) }
  | expr STAR expr { InfixApp ($1, Operator.MulOp, $3) }
  | expr SLASH expr { InfixApp ($1, Operator.DivOp, $3) }
  | LET IDENT EQUALS expr { Decl ($2, $4) }