// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Lang.Ast

let helper x = x * x

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | EQUALS
  | LET
  | MINUS
  | PLUS
  | SLASH
  | STAR
  | RIGHT_PAREN
  | LEFT_PAREN
  | IDENT of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EQUALS
    | TOKEN_LET
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_RIGHT_PAREN
    | TOKEN_LEFT_PAREN
    | TOKEN_IDENT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | EQUALS  -> 1 
  | LET  -> 2 
  | MINUS  -> 3 
  | PLUS  -> 4 
  | SLASH  -> 5 
  | STAR  -> 6 
  | RIGHT_PAREN  -> 7 
  | LEFT_PAREN  -> 8 
  | IDENT _ -> 9 
  | INT _ -> 10 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_EQUALS 
  | 2 -> TOKEN_LET 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_PLUS 
  | 5 -> TOKEN_SLASH 
  | 6 -> TOKEN_STAR 
  | 7 -> TOKEN_RIGHT_PAREN 
  | 8 -> TOKEN_LEFT_PAREN 
  | 9 -> TOKEN_IDENT 
  | 10 -> TOKEN_INT 
  | 13 -> TOKEN_end_of_input
  | 11 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 13 
let _fsyacc_tagOfErrorTerminal = 11

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | EQUALS  -> "EQUALS" 
  | LET  -> "LET" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | RIGHT_PAREN  -> "RIGHT_PAREN" 
  | LEFT_PAREN  -> "LEFT_PAREN" 
  | IDENT _ -> "IDENT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | RIGHT_PAREN  -> (null : System.Object) 
  | LEFT_PAREN  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;7us;65535us;0us;4us;10us;11us;18us;13us;19us;14us;20us;15us;21us;16us;24us;17us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;5us;3us;8us;9us;10us;11us;1us;3us;1us;4us;1us;5us;1us;5us;1us;6us;1us;7us;5us;7us;8us;9us;10us;11us;1us;7us;5us;8us;8us;9us;10us;11us;5us;8us;9us;9us;10us;11us;5us;8us;9us;10us;10us;11us;5us;8us;9us;10us;11us;11us;5us;8us;9us;10us;11us;12us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;12us;1us;12us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;14us;16us;18us;20us;22us;24us;26us;32us;34us;40us;46us;52us;58us;64us;66us;68us;70us;72us;74us;76us;|]
let _fsyacc_action_rows = 25
let _fsyacc_actionTableElements = [|6us;32768us;0us;3us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;0us;49152us;0us;16385us;0us;16386us;5us;32768us;0us;5us;3us;19us;4us;18us;5us;21us;6us;20us;0us;16387us;0us;16388us;1us;32768us;10us;8us;0us;16389us;0us;16390us;5us;32768us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;5us;32768us;3us;19us;4us;18us;5us;21us;6us;20us;7us;12us;0us;16391us;2us;16392us;5us;21us;6us;20us;2us;16393us;5us;21us;6us;20us;0us;16394us;0us;16395us;4us;16396us;3us;19us;4us;18us;5us;21us;6us;20us;5us;32768us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;5us;32768us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;5us;32768us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;5us;32768us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;1us;32768us;9us;23us;1us;32768us;1us;24us;5us;32768us;2us;22us;3us;7us;8us;10us;9us;9us;10us;6us;|]
let _fsyacc_actionTableRowOffsets = [|0us;7us;8us;9us;10us;16us;17us;18us;20us;21us;22us;28us;34us;35us;38us;41us;42us;43us;48us;54us;60us;66us;72us;74us;76us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;2us;1us;2us;1us;3us;3us;3us;3us;3us;4us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;65535us;16387us;16388us;65535us;16389us;16390us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 142 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 151 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_prog in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                   _1 
                   )
# 34 "Parser.fsy"
                 : Expr option));
# 162 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                               None 
                   )
# 37 "Parser.fsy"
                 : 'gentype_prog));
# 172 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                    Some _1 
                   )
# 38 "Parser.fsy"
                 : 'gentype_prog));
# 183 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                               Int _1 
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 194 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                     Int (-1 * _2)
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 205 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                 Ident _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 216 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                       Paren _2 
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 227 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                          InfixApp (_1, Operator.AddOp, _3) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 239 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                           InfixApp (_1, Operator.SubOp, _3) 
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 251 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                          InfixApp (_1, Operator.MulOp, _3) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 263 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                           InfixApp (_1, Operator.DivOp, _3) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
# 275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                 Decl (_2, _4) 
                   )
# 49 "Parser.fsy"
                 : 'gentype_expr));
|]
# 288 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 14;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Expr option =
    engine lexer lexbuf 0 :?> _
